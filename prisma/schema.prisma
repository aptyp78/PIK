// Prisma schema for PIK‑AI Parsing MVP

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model SourceDoc {
  id        Int      @id @default(autoincrement())
  title     String
  type      String?
  path      String
  engine    String?   // 'adobe' | 'unstructured'
  canvasProfileId String?
  canvasTransform String? // JSON string: { scaleX, scaleY, offsetX, offsetY, flipY, rotation }
  canvasMatchScore Float?
  pages     Int?
  createdAt DateTime @default(now())
  blocks    Block[]
  zones     Zone[]
}

model Block {
  id          Int      @id @default(autoincrement())
  sourceDocId Int
  page        Int
  bbox        String    // serialized bounding box: [x0,y0,x1,y1]
  role        String    // e.g. heading, paragraph, list, table
  text        String?
  tableJson   String?   // optional JSON for table structures
  hash        String?   // optional checksum to detect duplicates
  sourceDoc   SourceDoc @relation(fields: [sourceDocId], references: [id], onDelete: Cascade)

  @@index([sourceDocId])
  @@index([page])
  /// Create a simple index on text for faster LIKE queries.
  @@index([text])
}

model Methodology {
  id      Int     @id @default(autoincrement())
  title   String
  version String
  frames  Frame[]

  /// Ensure that a methodology is unique by the combination of title and version.
  @@unique([title, version])
}

model Frame {
  id             Int          @id @default(autoincrement())
  methodologyId  Int
  name           String
  slug           String @unique
  order          Int?
  fields         Field[]
  methodology    Methodology  @relation(fields: [methodologyId], references: [id], onDelete: Cascade)

  @@index([methodologyId])
}

model Field {

  id      Int   @id @default(autoincrement())
  frameId Int
  name    String
  slug    String @unique
  description String?
  order   Int?
  frame   Frame @relation(fields: [frameId], references: [id], onDelete: Cascade)

  @@index([frameId])
}

/// Single‑canvas data entities
model Zone {
  id          Int      @id @default(autoincrement())
  docId       Int
  key         String   // canonical key, e.g. 'core-services'
  name        String
  status      String   // Empty | Draft | Proposed | Approved | To review
  text        String?
  confidence  Int      @default(0)
  owner       String?  // free text for now
  tags        String?  // comma-separated
  history     String?  // JSON string of edits
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  doc         SourceDoc @relation(fields: [docId], references: [id], onDelete: Cascade)
  evidences   Evidence[]

  @@unique([docId, key])
  @@index([docId])
}

model Evidence {
  id      Int    @id @default(autoincrement())
  zoneId  Int
  page    Int     @default(1)
  x       Float
  y       Float
  w       Float
  h       Float
  createdAt DateTime @default(now())
  zone    Zone   @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@index([zoneId])
}
